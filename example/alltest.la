// Test suite for language features

// Test basic arithmetic
fun testArithmetic() {
    var a = 5 + 3;
    var b = 10 - 4;
    var c = 3 * 6;
    var d = 15 / 3;
    
    print("Arithmetic Test:");
    print("5 + 3 = " + a); // Should be 8
    print("10 - 4 = " + b); // Should be 6
    print("3 * 6 = " + c); // Should be 18
    print("15 / 3 = " + d); // Should be 5
}

// Test function calls and returns
fun add(a, b) {
    return a + b;
}

fun testFunctions() {
    print("Function Test:");
    var result = add(5, 3);
    print("add(5, 3) = " + result); // Should be 8
}

// Test conditionals
fun testConditionals() {
    print("Conditional Test:");
    var x = 10;
    var y = 5;
    print("x: " + x);
    print("y: " + y);
    if (x > y) {
        print("x is greater than y");
    } else {
        print("x is not greater than y");
    }
}

// Test loops
fun testLoops() {
    print("Loop Test:");
    var i = 0;
    var sum = 0;
    while (i < 5) {
        sum = sum + i;
        i = i + 1;
    }
    print("Sum of 0 to 4 = " + sum); // Should be 10
}

// Test arrays
fun testArrays() {
    print("Array Test:");
    var arr = [12, 34, 5, 34, 12];
    print("Array: " + arr);
    print("First element: " + arr[0]); // Should be 1
    // arr[2] = 10;
    // print("Modified array: " + arr); // Should show updated value
}

// Test error handling
fun testErrorHandling() {
    print("Error Handling Test:");
    try {
        // Attempt something that might fail
        var x = 1 / 0; // Should cause division by zero error
    } catch (error) {
        print("Caught error: " + error);
    }
}

// Test nested functions
fun testNestedFunctions() {
    print("Nested Function Test:");
    fun nested(x) {
        return x * x;
    }
    var result = nested(4);
    print("4 squared = " + result); // Should be 16
}

// Test scope
fun testScope() {
    print("Scope Test:");
    var x = "outer";
    {
        var x = "inner";
        print("Inner scope: " + x);
    }
    print("Outer scope: " + x);
}

// Run all tests
fun runAllTests() {
    print("=== Starting Tests ===");
    testArithmetic();
    testFunctions();
    testConditionals();
    testLoops();
    testArrays();
    testErrorHandling();
    testNestedFunctions();
    testScope();
    print("=== Tests Complete ===");
}

// Execute the test suite
runAllTests();
